import base64

class URLHandler:
	def __init__(self, prefix, suffix, size):
		self.prefix = prefix
		self.suffix = suffix
		self.size = int(size)

	@staticmethod
	def to_url(suffix):
		if (type(suffix) is list):
			suffix = [x for y in suffix for x in y] # Join		
		suffix = base64.b64encode(bytes(suffix))
		return suffix.decode('utf-8').replace('=', '~').replace('/', '!').replace('+', '-')

	def to_bytearray(self, plain_text=None):
		if (plain_text == None):
			tobase64 = self.suffix.replace('~', '=').replace('!', '/').replace('-', '+')
			array = bytearray(base64.b64decode(tobase64))
		else:
			array = bytearray(plain_text, 'ascii')		
		return [array[x:x+self.size] for x in range(0, len(array), self.size)] # Partition

	def get_url(self, suffix=None):
		if (suffix == None):
			return self.prefix + self.suffix
		else:
			return self.prefix + self.to_url(suffix) # Here suffix is a bytearray

	def generate_iv_list(self, updated_pad):
		iv_array = [bytearray(self.size-(1+len(updated_pad))) + bytes([i]) + updated_pad for i in range(256)]
		return iv_array
